@using VGWagers.Resource
@using VGWagers.Models
@model GameViewModel


  
<div class="col-md-12">
    @{
        Html.EnableUnobtrusiveJavaScript();
        Html.EnableClientValidation();
    }
    @using (Html.BeginForm("EditGame", "Lookup", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "gamedetailform" }))
    {
        @Html.AntiForgeryToken()

        if (@ViewBag.Mode == "Edit")
        {
            <h4 class="lookup-list-title">Edit Game record</h4>
        }
        if (@ViewBag.Mode == "New")
        {
            <h4 class="lookup-list-title">Add a new Game</h4>
        }
        <hr />
        <div class="alert alert-danger" role="alert" style="display: none" id="alertBox"></div>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                
        <div class="form-group">                
            @Html.LabelFor(m => m.GAMENAME, new { @class = "col-md-2 control-label" })
            <div class="col-md-4">
                @Html.TextBoxFor(m => m.GAMENAME, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.GAMENAME, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(m => m.GENRE, new { @class = "col-md-2 control-label" })
            <div class="col-md-4">
                @Html.DropDownList("GENREID", null, String.Empty, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.GENREID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ISACTIVE, new { @class = "col-md-2 control-label" })
            <div class="col-md-4 form-control-static">
                @Html.CheckBoxFor(m => m.ISACTIVE)
            </div>
                    
                @Html.LabelFor(m => m.RELEASEDATE, new { @class = "col-md-2 control-label" })
            <div class="col-md-4 form-control-static">
                @Html.TextBoxFor(m => m.RELEASEDATE, new { @class = "form-control datepicker", type = "date" })
                @Html.ValidationMessageFor(m => m.RELEASEDATE, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.AVAILABLEONPLATFORMS, new { @class = "col-md-2 control-label" })
            <div class="col-md-4 form-control-static">
                @Html.TextBox("txtPlatform", "",
                                new
                                {
                                    @class = "autocomplete-with-hidden form-control",
                                    data_url = Url.Action("GetActivePlatforms", "Lookup"),
                                    autocomplete = "on"
                                })
                @Html.Hidden("hdnSelectedPlatform")
                @Html.ListBoxFor(m => m.AVAILABLEONPLATFORMS, new MultiSelectList(Model.AVAILABLEONPLATFORMS), new { id = "lstPlatforms", @class = "form-control platformList", Multiple = "multiple", Size = 5, style = "width: 100%;" })                                
            </div>

            @Html.LabelFor(m => m.DIIFICULTYLEVELS, new { @class = "col-md-2 control-label" })
            <div class="col-md-4 form-control-static">
                @*@Html.DropDownList("DIFFICULTYLEVELID", String.Empty)*@
                @Html.ListBoxFor(m => m.DIIFICULTYLEVELS, new MultiSelectList(Model.DIIFICULTYLEVELS), new { id = "lstDifficultyLevels", @class = "form-control", Multiple = "multiple", Size = 5, style = "width: 100%;" })
                
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-7 col-md-1">
                <input type="submit" class="btn btn-primary btn-lg" value="Save" />                       
            </div>
            <div class="col-md-4 lookup-list-title">
                @Html.ActionLink(" Cancel and go back to Games List", "Index", "Lookup", routeValues: null, htmlAttributes: new { id = "cancelGameLink", @class = "modal-link cancel-link" })
            </div>
        </div>
    }            
</div>

<nav class="context-menu">
    <ul class="context-menu__items">
        <li class="context-menu__item">
            <a href="#" class="context-menu__link">
                <i class="fa fa-eye"></i> Remove
            </a>
        </li>
    </ul>
</nav>

    
<script>
    $(function () {
        $('#txtPlatform').autocomplete({
            minLength: 1,
            source: function (request, response) {
                var url = $(this.element).data('url');

                $.getJSON(url, { searchText: request.term }, function (data) {
                    response($.map(data,
                        function (item) {
                            return {
                                label: item.PLATFORMNAME,
                                value1: item.PLATFORMID
                            }
                        }));
                })
            },
            select: function (event, ui) {
                $(event.target).next('input[type=hidden]').val(ui.item.value1);
                //$(event.target).val(ui.item.label);

                var optionVal = ui.item.value1;
                var exists = false;
                $('#lstPlatforms option').each(function () {
                    $(this).removeAttr("selected");

                    if (this.value == optionVal) {
                        exists = true;
                    }
                });

                if (!exists) {
                    $('#lstPlatforms').append('<option value="' + ui.item.value1 + '" selected data-icon="glyphicon-remove">' +
                        ui.item.label +
                        "</option>"
                        );
                    $(event.target).val('');
                    return false;
                }
                else {
                    $(event.target).val(ui.item.label + ' - Platform already in list');
                    return false;
                }
                
            },
            change: function (event, ui) {
                if (!ui.item) {
                    $(event.target).val('').next('input[type=hidden]').val('');
                }
            }
        });

        $('#txtPlatform').click(
            function () {
                $('#txtPlatform').val('');
            }
        );

        var platformClassName = 'platformList';
        var menu = document.querySelector("#context-menu");
        var menuState = 0;
        var active = "context-menu--active";
        var menuPosition;
        var menuPositionX;
        var menuPositionY;

        function init() {
            contextListener();
            clickListener();
            keyupListener();
        }

        /**
         * Listens for contextmenu events.
         */
        function contextListener() {
            document.addEventListener("contextmenu", function (e) {
                if (clickInsideElement(e, taskItemClassName)) {
                    e.preventDefault();
                    toggleMenuOn();
                    positionMenu(e);
                } else {
                    toggleMenuOff();
                }
            });
        }

        /**
         * Listens for click events.
         */
        function clickListener() {
            document.addEventListener("click", function (e) {
                var button = e.which || e.button;
                if (button === 1) {
                    toggleMenuOff();
                }
            });
        }

        /**
         * Listens for keyup events.
         */
        function keyupListener() {
            window.onkeyup = function (e) {
                if (e.keyCode === 27) {
                    toggleMenuOff();
                }
            }
        }

        $("#lstPlatforms option").each(function () {
            // Add $(this).val() to your list
            var taskItem = (this);
            contextMenuListener(taskItem);
        });

        function contextMenuListener(el) {
            el.addEventListener("contextmenu", function (e) {
                //console.log(e, el);
                e.preventDefault();
                toggleMenuOn();
            });
        }

        function toggleMenuOn() {
            if (menuState !== 1) {
                menuState = 1;
                menu.classList.add(active);
            }
        }

        function toggleMenuOff() {
            if (menuState !== 0) {
                menuState = 0;
                menu.classList.remove(activeClassName);
            }
        }

        function clickInsideElement(e, className) {
            var el = e.srcElement || e.target;

            if (el.classList.contains(className)) {
                return el;
            } else {
                while (el = el.parentNode) {
                    if (el.classList && el.classList.contains(className)) {
                        return el;
                    }
                }
            }

            return false;
        }

        function getPosition(e) {
            var posx = 0;
            var posy = 0;

            if (!e) var e = window.event;

            if (e.pageX || e.pageY) {
                posx = e.pageX;
                posy = e.pageY;
            } else if (e.clientX || e.clientY) {
                posx = e.clientX + document.body.scrollLeft +
                                   document.documentElement.scrollLeft;
                posy = e.clientY + document.body.scrollTop +
                                   document.documentElement.scrollTop;
            }

            return {
                x: posx,
                y: posy
            }
        }

        function positionMenu(e) {
            menuPosition = getPosition(e);
            menuPositionX = menuPosition.x + "px";
            menuPositionY = menuPosition.y + "px";

            menu.style.left = menuPositionX;
            menu.style.top = menuPositionY;
        }

        init();
    })
</script>